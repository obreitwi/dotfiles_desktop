###
#### 
# cfg["folder"] = "$HOME"
# cfg["filename"] = ".xinitrc"
# cfg["permissions"] = 0o755
###
#!/bin/bash
cd $HOME

file_update_keyboard="${HOME}/.local/bin/daemon_restore_keyboard_settings_as_user"
if [ -f "${file_update_keyboard}" ]; then
    "${file_update_keyboard}" &

    pid_kb_update=$!

    # let the updater run once
    (sleep 2 && kill -CONT ${pid_kb_update}) &

    unset pid_kb_update
else
    # xsetroot -cursor_name left_ptr &
    setxkbmap us\
      -variant altgr-intl \
      -model pc105\
      -option compose:menu \
      -option lv3:ralt_switch \
      -option eurosign:e \
      -option nbsp:level3n
    # -option terminate:ctrl_alt_bkspc \

    xmodmap ~/.Xmodmap &
fi

# xrdb ~/.Xresources &
xrdb ~/.Xdefaults &
# xcompmgr -c -f -D 6 &


if which picom>/dev/null; then
    picom_args=(-b)
### picom
### picom @ mimir
    # If we use nvidia as the main renderer -> compose with glx backend
    if [ "$(glxinfo | grep "OpenGL renderer")" = "OpenGL renderer string: Quadro T2000 with Max-Q Design/PCIe/SSE2" ]; then
        picom_args+=(--backend glx --xrender-sync-fence)
    fi
###
    picom "${picom_args[@]}"
fi

# increase repeat rate
xset rate 200 75

# no beep
xset b off

# ~/bin/keynav &
keynav &

### display
# simply let autorandr detect the current configuration
if test -x "$(which autorandr)"; then
    autorandr "${AUTORANDR_PROFILE:+--load ${AUTORANDR_PROFILE}}" ${AUTORANDR_PROFILE:--c}
fi
### display@lark
# xrandr --output VGA1 --mode 1920x1080
xrandr --output HDMI1 --mode 1920x1080
xrandr --output HDMI2 --mode 1920x1080
xrandr --output HDMI2 --primary
xrandr --output HDMI1 --right-of HDMI2
### display@nurikum
xrandr --output DVI-I-1 --primary
xrandr --output DVI-I-1 --right-of DVI-I-2
### display@phaeloff
if xrandr | grep "HDMI-1 connected"; then
    xrandr --output LVDS-1 --primary --auto --pos 0x0 --output HDMI-1 --auto \
    --pos 1368x0 && feh --bg-fill ~/wallpaper/brisbinxmonadwall.png
fi
if xrandr | grep "HDMI-0 connected"; then
    xrandr --output LVDS --primary --auto --pos 0x0 --output HDMI-0 --auto \
    --pos 1368x0 && feh --bg-fill ~/wallpaper/brisbinxmonadwall.png
fi
### display@abed-disabled
lid_state="$(awk '$1 ~ /state:/ { print $2 }'  /proc/acpi/button/lid/LID/state)"
current_provider="$(xrandr --listproviders | tr ' ' '\n' | grep "^name:" | cut -d : -f 2)"
if [ "${lid_state}" = "open" ] && [ "${current_provider}" != "NVIDIA-0"  ]; then
    # if lid is open, only show screen on laptop
    monitors_laptop
else
    # if lid is closed, pick defaults
    refresh_monitors  # defined in host specific file
fi
###

### additional-display
### additional-display @ mimir
# Check if we are currently running in nvidia-standalone mode
# main_provider="$(xrandr --listproviders | grep "^Provider 0:" | tr ' ' '\n' | awk -F: '$1 == "name" { print $2 }')"
if [ -f /etc/X11/xorg.conf.d/10-nvidia-drm-outputclass.conf ]; then
    xrandr --setprovideroutputsource modesetting NVIDIA-0
    autorandr -l nvidia-rzo-dual-right
fi
# unset main_provider
###

if which gnome-keyring-daemon >/dev/null; then
    source <(gnome-keyring-daemon --components=secrets -r -d | sed "s:^:export :g")
fi

### virtualbox
### virtualbox@nurikum
VBoxClient-all &
###

### background
feh  --bg-fill "${HOME}/wallpaper/brisbinxmonadwall.png"
### background@mucku
feh --bg-fill "${HOME}/wallpaper/space.jpg"
###

killall unclutter
unclutter &

# killall autocutsel
# autocutsel -fork &
# autocutsel -selection PRIMARY -fork &

if which urxvtd >/dev/null; then
    # killall urxvtd # -o kills urxvtd automatically when X is restarted
    urxvtd -q -o -f
fi

### autolock
### autolock @ lark,gordon
# auto lock screen after 10 minutes of idle
~/git/dotfiles_desktop/scripts/autolock.sh &
### autolock @ mimir
# Lock screen after 5 minutes of idle
xset s 300
# TODO: Find solution for unlocking via fingerprint
xss-lock -- slock &
###

(which udiskie > /dev/null) && udiskie --tray &

# Disable TapButtons for trackpad
# synclient TapButton1=0
# synclient TapButton2=0
# synclient TapButton3=0

# start sccache server
if which sccache > /dev/null; then
    sccache --stop-server &> /dev/null
    SCCACHE_IDLE_TIMEOUT=0 sccache --start-server &> /dev/null
fi

if [ -f /etc/X11/xinit/xinitrc.d/50-systemd-user.sh ]; then
    source /etc/X11/xinit/xinitrc.d/50-systemd-user.sh
fi
systemctl --user import-environment DISPLAY XAUTHORITY DBUS_SESSION_BUS_ADDRESS
systemctl --no-block --user start xsession.target

### brightness
### brightness @ abed-diabled
# if AC on then full brightness, otherwise 25
if [ $(cat /sys/class/power_supply/AC/online) -eq 1 ]; then
    xbacklight -set 100
else
    xbacklight -set 25
fi
###

# disable mouse acceleration
xset m 0 0

if which synclient >/dev/null; then
    ~/git/dotfiles_desktop/scripts/trackpad-toggle.sh &
fi

. ~/.config/gnupg/gpg-agent.sh

if which lxpolkit>/dev/null; then
    lxpolkit &
fi

tmpfile="$(mktemp)"
lsusb -v 2>/dev/null 1>"${tmpfile}"

# check if mx518 is connected and if so swap buttons
if awk 'BEGIN { rc=1 } $1 == "idVendor" { vendor = $2 } $1 == "idProduct" && vendor == "0x046d" && $2 == "0xc08e" { rc=0 } END { exit rc }' "${tmpfile}"; then
    # The following settings disable scroll capabilities in firefox, but stillwork in chromium -> strange
    # xmodmap -e 'pointer = 1 9 3 6 7 10 11 2 8 12 4 5'
    xmodmap -e 'pointer = 1 8 3 4 5 6 7 2 9 10 11 12'
elif awk 'BEGIN { rc=1 } $1 == "idVendor" { vendor = $2 } $1 == "idProduct" && vendor == "0x046d" && $2 == "0xc068" { rc=0 } END { exit rc }' "${tmpfile}"; then
    # remap thumb buttons of broken g500 to mouse wheel
    xmodmap -e 'pointer = 1 2 3 6 7 8 9 5 4'
fi
rm "${tmpfile}"

### dpi
### dpi @ mimir
xrandr --dpi 96
###

# Use pinentry-rofi if available
if which pinentry-rofi>/dev/null; then
    export PINENTRY_PROGRAM="$(which pinentry-rofi)"
fi

# Start easyeffects equalizer if available
if which easyeffects>/dev/null; then
    easyeffects --gapplication-service &> /dev/null &|
fi

# try to remove the state file so that things that might have changed during
# shutdown (e.g. numbre of monitors) gets recognized correctly
rm -f $HOME/.xmonad/xmonad.state
if [ -f ~/.xmonad/bin/xmonad-x86_64-linux ]; then
    exec ~/.xmonad/bin/xmonad-x86_64-linux
else
    exec ~/.xmonad/bin/xmonad
fi
